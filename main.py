from os import path

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, BotCommandScope

from prettytable import PrettyTable

from config import config
from utils import load_json_data

main_dir = path.dirname(__file__)
filename = path.join(main_dir, "storage", "schedule.json")

schedule = load_json_data(filename)
days = tuple(map(lambda day: day.lower(), schedule.keys()))

bot = Bot(token=config["token"])

# bot.set_my_commands(commands=[
#     BotCommandScope(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
#     BotCommandScope(command="help", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
#     BotCommandScope(command="load", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
# ])

dp = Dispatcher()

day_names_ru = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}


@dp.message(Command(commands=["start"]))
async def start(message: Message):
    pass


@dp.message(Command(commands=[*days]))
async def sendLessons(message: Message):
    
    for day in days:
        if message.text == f"/{day}":
            key = day.capitalize()

            if "lessons" in schedule[key]:
                lessons = schedule[key]["lessons"]

                table = PrettyTable()
                table.border = False
                table.field_names = ["–ù–æ–º–µ—Ä", "–ù–∞—á–∞–ª–æ", "–ö–æ–Ω–µ—Ü", "–£—Ä–æ–∫", "–ó–∞–º–µ–Ω–∞"]
                for lesson in lessons:
                    table.add_row(tuple(lesson.values()))
                
                text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_names_ru[key]}\n\n<code>{table.get_string()}</code>"
                await message.answer(text, parse_mode="HTML")

            else:
                await message.answer("üéâüéâ –í—ã—Ö–æ–¥–Ω–æ–π üéâüéâ")

@dp.message(Command(commands=['schedule']))
async def sendAllLessons(message: Message):
    table = PrettyTable()
    table.border = True
    table.field_names = ["‚Ññ", "–ù–∞—á–∞–ª–æ", "–ö–æ–Ω–µ—Ü", "–£—Ä–æ–∫", "–ó–∞–º–µ–Ω–∞"]

    for day in days:
        key = day.capitalize()
        if "lessons" in schedule[key]:
            
            # header = "| ‚Ññ | –ù–∞—á–∞–ª–æ | –ö–æ–Ω–µ—Ü | –£—Ä–æ–∫ | –ó–∞–º–µ–Ω–∞ |\n|---|---|---|---|---|"
            # table_list.append(header)
            lessons = schedule[key]["lessons"]

            for item in enumerate(lessons):
                index = item[0]
                lesson = item[1]
                replacement = "–î–∞" if lesson["replacement"] else "–ù–µ—Ç"

                row = [lesson["number"], lesson["start_time"], lesson["end_time"], lesson["title"], replacement]
        
                if index < len(lessons) - 1:
                    table.add_row(row)
                else:
                    table.add_row(row, divider=True)
                 
        else:
            day_off = schedule[key]["day_off"][0]["title"]
            row = ["", "", "", day_off, ""]
            table.add_row(row, divider=True)

    await message.answer(
        f"*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é*\n<code>{table.get_string()}</code>",
        parse_mode="HTML"
    )

if __name__ == "__main__":
    dp.run_polling(bot)

"""

–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫

1 –ê–ª–≥–µ–±—Ä–∞         (08:00 - 08:40)
2 –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞     (08:50 - 09:30)
3 –•–∏–º–∏—è           (09:50 - 10:30)
4 –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ (10:50 - 11:30)
5 –ú—É–∑—ã–∫–∞          (11:40 - 12:20)
6 –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è      (12:40 - 13:20)
7 –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è      (13:30 - 14:10)
"""